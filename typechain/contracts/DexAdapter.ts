/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface DexAdapterInterface extends utils.Interface {
  functions: {
    "_sortTokens(address,address)": FunctionFragment;
    "collectAllFees(uint256)": FunctionFragment;
    "createPool(address,address,uint24,uint160)": FunctionFragment;
    "decreaseLiquidity(uint256,uint128)": FunctionFragment;
    "increaseLiquidity(uint256,uint256,uint256)": FunctionFragment;
    "mintNewPosition(address,address,uint24,uint256,uint256,int24,int24)": FunctionFragment;
    "positionManager()": FunctionFragment;
    "positions(uint256)": FunctionFragment;
    "swapExactInput(address,uint256,uint256,bytes)": FunctionFragment;
    "swapExactOutput(address,uint256,uint256,bytes)": FunctionFragment;
    "swapRouter()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "_sortTokens"
      | "collectAllFees"
      | "createPool"
      | "decreaseLiquidity"
      | "increaseLiquidity"
      | "mintNewPosition"
      | "positionManager"
      | "positions"
      | "swapExactInput"
      | "swapExactOutput"
      | "swapRouter"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "_sortTokens",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "collectAllFees",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createPool",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseLiquidity",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseLiquidity",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mintNewPosition",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "positionManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "positions",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactInput",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactOutput",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapRouter",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "_sortTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectAllFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintNewPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "positionManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "positions", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "swapExactInput",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactOutput",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swapRouter", data: BytesLike): Result;

  events: {
    "FeesCollected(uint256,uint256)": EventFragment;
    "LiquidityIncreased(uint128,uint256,uint256)": EventFragment;
    "PoolCreated(address,address,address)": EventFragment;
    "PositionMinted(uint256,address,address,address,uint128)": EventFragment;
    "SwapSuccess()": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FeesCollected"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityIncreased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PositionMinted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapSuccess"): EventFragment;
}

export interface FeesCollectedEventObject {
  amount0: BigNumber;
  amount1: BigNumber;
}
export type FeesCollectedEvent = TypedEvent<
  [BigNumber, BigNumber],
  FeesCollectedEventObject
>;

export type FeesCollectedEventFilter = TypedEventFilter<FeesCollectedEvent>;

export interface LiquidityIncreasedEventObject {
  liquidity: BigNumber;
  amount0: BigNumber;
  amount1: BigNumber;
}
export type LiquidityIncreasedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  LiquidityIncreasedEventObject
>;

export type LiquidityIncreasedEventFilter =
  TypedEventFilter<LiquidityIncreasedEvent>;

export interface PoolCreatedEventObject {
  tokenA: string;
  tokenB: string;
  pair: string;
}
export type PoolCreatedEvent = TypedEvent<
  [string, string, string],
  PoolCreatedEventObject
>;

export type PoolCreatedEventFilter = TypedEventFilter<PoolCreatedEvent>;

export interface PositionMintedEventObject {
  tokenId: BigNumber;
  owner: string;
  token0: string;
  token1: string;
  liquidity: BigNumber;
}
export type PositionMintedEvent = TypedEvent<
  [BigNumber, string, string, string, BigNumber],
  PositionMintedEventObject
>;

export type PositionMintedEventFilter = TypedEventFilter<PositionMintedEvent>;

export interface SwapSuccessEventObject {}
export type SwapSuccessEvent = TypedEvent<[], SwapSuccessEventObject>;

export type SwapSuccessEventFilter = TypedEventFilter<SwapSuccessEvent>;

export interface DexAdapter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DexAdapterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _sortTokens(
      tokenA: PromiseOrValue<string>,
      tokenB: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string, string] & { token0: string; token1: string }>;

    collectAllFees(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createPool(
      token0: PromiseOrValue<string>,
      token1: PromiseOrValue<string>,
      fee: PromiseOrValue<BigNumberish>,
      sqrtPriceX96: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    decreaseLiquidity(
      tokenId: PromiseOrValue<BigNumberish>,
      liquidity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    increaseLiquidity(
      tokenId: PromiseOrValue<BigNumberish>,
      amountAdd0: PromiseOrValue<BigNumberish>,
      amountAdd1: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mintNewPosition(
      token0: PromiseOrValue<string>,
      token1: PromiseOrValue<string>,
      poolFee: PromiseOrValue<BigNumberish>,
      amount0ToMint: PromiseOrValue<BigNumberish>,
      amount1ToMint: PromiseOrValue<BigNumberish>,
      minTick: PromiseOrValue<BigNumberish>,
      maxTick: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    positionManager(overrides?: CallOverrides): Promise<[string]>;

    positions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber] & {
        owner: string;
        token0: string;
        token1: string;
        liquidity: BigNumber;
      }
    >;

    swapExactInput(
      tokenIn: PromiseOrValue<string>,
      amountIn: PromiseOrValue<BigNumberish>,
      amountOutMinimum: PromiseOrValue<BigNumberish>,
      path: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapExactOutput(
      tokenIn: PromiseOrValue<string>,
      amountOut: PromiseOrValue<BigNumberish>,
      amountInMaximum: PromiseOrValue<BigNumberish>,
      path: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapRouter(overrides?: CallOverrides): Promise<[string]>;
  };

  _sortTokens(
    tokenA: PromiseOrValue<string>,
    tokenB: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[string, string] & { token0: string; token1: string }>;

  collectAllFees(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createPool(
    token0: PromiseOrValue<string>,
    token1: PromiseOrValue<string>,
    fee: PromiseOrValue<BigNumberish>,
    sqrtPriceX96: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  decreaseLiquidity(
    tokenId: PromiseOrValue<BigNumberish>,
    liquidity: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  increaseLiquidity(
    tokenId: PromiseOrValue<BigNumberish>,
    amountAdd0: PromiseOrValue<BigNumberish>,
    amountAdd1: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mintNewPosition(
    token0: PromiseOrValue<string>,
    token1: PromiseOrValue<string>,
    poolFee: PromiseOrValue<BigNumberish>,
    amount0ToMint: PromiseOrValue<BigNumberish>,
    amount1ToMint: PromiseOrValue<BigNumberish>,
    minTick: PromiseOrValue<BigNumberish>,
    maxTick: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  positionManager(overrides?: CallOverrides): Promise<string>;

  positions(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, BigNumber] & {
      owner: string;
      token0: string;
      token1: string;
      liquidity: BigNumber;
    }
  >;

  swapExactInput(
    tokenIn: PromiseOrValue<string>,
    amountIn: PromiseOrValue<BigNumberish>,
    amountOutMinimum: PromiseOrValue<BigNumberish>,
    path: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapExactOutput(
    tokenIn: PromiseOrValue<string>,
    amountOut: PromiseOrValue<BigNumberish>,
    amountInMaximum: PromiseOrValue<BigNumberish>,
    path: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapRouter(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    _sortTokens(
      tokenA: PromiseOrValue<string>,
      tokenB: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string, string] & { token0: string; token1: string }>;

    collectAllFees(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
    >;

    createPool(
      token0: PromiseOrValue<string>,
      token1: PromiseOrValue<string>,
      fee: PromiseOrValue<BigNumberish>,
      sqrtPriceX96: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    decreaseLiquidity(
      tokenId: PromiseOrValue<BigNumberish>,
      liquidity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
    >;

    increaseLiquidity(
      tokenId: PromiseOrValue<BigNumberish>,
      amountAdd0: PromiseOrValue<BigNumberish>,
      amountAdd1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        liquidity: BigNumber;
        amount0: BigNumber;
        amount1: BigNumber;
      }
    >;

    mintNewPosition(
      token0: PromiseOrValue<string>,
      token1: PromiseOrValue<string>,
      poolFee: PromiseOrValue<BigNumberish>,
      amount0ToMint: PromiseOrValue<BigNumberish>,
      amount1ToMint: PromiseOrValue<BigNumberish>,
      minTick: PromiseOrValue<BigNumberish>,
      maxTick: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        tokenId: BigNumber;
        liquidity: BigNumber;
        amount0: BigNumber;
        amount1: BigNumber;
      }
    >;

    positionManager(overrides?: CallOverrides): Promise<string>;

    positions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber] & {
        owner: string;
        token0: string;
        token1: string;
        liquidity: BigNumber;
      }
    >;

    swapExactInput(
      tokenIn: PromiseOrValue<string>,
      amountIn: PromiseOrValue<BigNumberish>,
      amountOutMinimum: PromiseOrValue<BigNumberish>,
      path: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapExactOutput(
      tokenIn: PromiseOrValue<string>,
      amountOut: PromiseOrValue<BigNumberish>,
      amountInMaximum: PromiseOrValue<BigNumberish>,
      path: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapRouter(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "FeesCollected(uint256,uint256)"(
      amount0?: null,
      amount1?: null
    ): FeesCollectedEventFilter;
    FeesCollected(amount0?: null, amount1?: null): FeesCollectedEventFilter;

    "LiquidityIncreased(uint128,uint256,uint256)"(
      liquidity?: null,
      amount0?: null,
      amount1?: null
    ): LiquidityIncreasedEventFilter;
    LiquidityIncreased(
      liquidity?: null,
      amount0?: null,
      amount1?: null
    ): LiquidityIncreasedEventFilter;

    "PoolCreated(address,address,address)"(
      tokenA?: PromiseOrValue<string> | null,
      tokenB?: PromiseOrValue<string> | null,
      pair?: null
    ): PoolCreatedEventFilter;
    PoolCreated(
      tokenA?: PromiseOrValue<string> | null,
      tokenB?: PromiseOrValue<string> | null,
      pair?: null
    ): PoolCreatedEventFilter;

    "PositionMinted(uint256,address,address,address,uint128)"(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      owner?: PromiseOrValue<string> | null,
      token0?: PromiseOrValue<string> | null,
      token1?: null,
      liquidity?: null
    ): PositionMintedEventFilter;
    PositionMinted(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      owner?: PromiseOrValue<string> | null,
      token0?: PromiseOrValue<string> | null,
      token1?: null,
      liquidity?: null
    ): PositionMintedEventFilter;

    "SwapSuccess()"(): SwapSuccessEventFilter;
    SwapSuccess(): SwapSuccessEventFilter;
  };

  estimateGas: {
    _sortTokens(
      tokenA: PromiseOrValue<string>,
      tokenB: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collectAllFees(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createPool(
      token0: PromiseOrValue<string>,
      token1: PromiseOrValue<string>,
      fee: PromiseOrValue<BigNumberish>,
      sqrtPriceX96: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    decreaseLiquidity(
      tokenId: PromiseOrValue<BigNumberish>,
      liquidity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    increaseLiquidity(
      tokenId: PromiseOrValue<BigNumberish>,
      amountAdd0: PromiseOrValue<BigNumberish>,
      amountAdd1: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mintNewPosition(
      token0: PromiseOrValue<string>,
      token1: PromiseOrValue<string>,
      poolFee: PromiseOrValue<BigNumberish>,
      amount0ToMint: PromiseOrValue<BigNumberish>,
      amount1ToMint: PromiseOrValue<BigNumberish>,
      minTick: PromiseOrValue<BigNumberish>,
      maxTick: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    positionManager(overrides?: CallOverrides): Promise<BigNumber>;

    positions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapExactInput(
      tokenIn: PromiseOrValue<string>,
      amountIn: PromiseOrValue<BigNumberish>,
      amountOutMinimum: PromiseOrValue<BigNumberish>,
      path: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapExactOutput(
      tokenIn: PromiseOrValue<string>,
      amountOut: PromiseOrValue<BigNumberish>,
      amountInMaximum: PromiseOrValue<BigNumberish>,
      path: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapRouter(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    _sortTokens(
      tokenA: PromiseOrValue<string>,
      tokenB: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collectAllFees(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createPool(
      token0: PromiseOrValue<string>,
      token1: PromiseOrValue<string>,
      fee: PromiseOrValue<BigNumberish>,
      sqrtPriceX96: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    decreaseLiquidity(
      tokenId: PromiseOrValue<BigNumberish>,
      liquidity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    increaseLiquidity(
      tokenId: PromiseOrValue<BigNumberish>,
      amountAdd0: PromiseOrValue<BigNumberish>,
      amountAdd1: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mintNewPosition(
      token0: PromiseOrValue<string>,
      token1: PromiseOrValue<string>,
      poolFee: PromiseOrValue<BigNumberish>,
      amount0ToMint: PromiseOrValue<BigNumberish>,
      amount1ToMint: PromiseOrValue<BigNumberish>,
      minTick: PromiseOrValue<BigNumberish>,
      maxTick: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    positionManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    positions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swapExactInput(
      tokenIn: PromiseOrValue<string>,
      amountIn: PromiseOrValue<BigNumberish>,
      amountOutMinimum: PromiseOrValue<BigNumberish>,
      path: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapExactOutput(
      tokenIn: PromiseOrValue<string>,
      amountOut: PromiseOrValue<BigNumberish>,
      amountInMaximum: PromiseOrValue<BigNumberish>,
      path: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
