/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface FundManagerInterface extends utils.Interface {
  functions: {
    "createFoundation(address,string)": FunctionFragment;
    "numberOfFoundationsCreated()": FunctionFragment;
    "ownersOfFunds(address)": FunctionFragment;
    "transferFundsToReceiver(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "createFoundation"
      | "numberOfFoundationsCreated"
      | "ownersOfFunds"
      | "transferFundsToReceiver"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createFoundation",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "numberOfFoundationsCreated",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ownersOfFunds",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFundsToReceiver",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "createFoundation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numberOfFoundationsCreated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownersOfFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFundsToReceiver",
    data: BytesLike
  ): Result;

  events: {
    "FoundationCreated(address,address,string,uint256)": EventFragment;
    "FundsTransferred(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FoundationCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FundsTransferred"): EventFragment;
}

export interface FoundationCreatedEventObject {
  foundationAddress: string;
  owner: string;
  description: string;
  amount: BigNumber;
}
export type FoundationCreatedEvent = TypedEvent<
  [string, string, string, BigNumber],
  FoundationCreatedEventObject
>;

export type FoundationCreatedEventFilter =
  TypedEventFilter<FoundationCreatedEvent>;

export interface FundsTransferredEventObject {
  foundationAddress: string;
  receiver: string;
  amount: BigNumber;
}
export type FundsTransferredEvent = TypedEvent<
  [string, string, BigNumber],
  FundsTransferredEventObject
>;

export type FundsTransferredEventFilter =
  TypedEventFilter<FundsTransferredEvent>;

export interface FundManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FundManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createFoundation(
      donationReceiver: PromiseOrValue<string>,
      description: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    numberOfFoundationsCreated(overrides?: CallOverrides): Promise<[BigNumber]>;

    ownersOfFunds(
      foundation: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string] & { owner: string }>;

    transferFundsToReceiver(
      foundationAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  createFoundation(
    donationReceiver: PromiseOrValue<string>,
    description: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  numberOfFoundationsCreated(overrides?: CallOverrides): Promise<BigNumber>;

  ownersOfFunds(
    foundation: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  transferFundsToReceiver(
    foundationAddress: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    createFoundation(
      donationReceiver: PromiseOrValue<string>,
      description: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    numberOfFoundationsCreated(overrides?: CallOverrides): Promise<BigNumber>;

    ownersOfFunds(
      foundation: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    transferFundsToReceiver(
      foundationAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "FoundationCreated(address,address,string,uint256)"(
      foundationAddress?: PromiseOrValue<string> | null,
      owner?: PromiseOrValue<string> | null,
      description?: null,
      amount?: null
    ): FoundationCreatedEventFilter;
    FoundationCreated(
      foundationAddress?: PromiseOrValue<string> | null,
      owner?: PromiseOrValue<string> | null,
      description?: null,
      amount?: null
    ): FoundationCreatedEventFilter;

    "FundsTransferred(address,address,uint256)"(
      foundationAddress?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      amount?: null
    ): FundsTransferredEventFilter;
    FundsTransferred(
      foundationAddress?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      amount?: null
    ): FundsTransferredEventFilter;
  };

  estimateGas: {
    createFoundation(
      donationReceiver: PromiseOrValue<string>,
      description: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    numberOfFoundationsCreated(overrides?: CallOverrides): Promise<BigNumber>;

    ownersOfFunds(
      foundation: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferFundsToReceiver(
      foundationAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createFoundation(
      donationReceiver: PromiseOrValue<string>,
      description: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    numberOfFoundationsCreated(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ownersOfFunds(
      foundation: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferFundsToReceiver(
      foundationAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
