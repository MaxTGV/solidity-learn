/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface VestingInterface extends utils.Interface {
  functions: {
    "DISTRIBUTE_RIGHTS_PERIOD()": FunctionFragment;
    "VESTING_DURATION()": FunctionFragment;
    "distributeRights(address,uint256)": FunctionFragment;
    "getAvailableAmount(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "releasePercentageByMonth(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "vestingEndTime()": FunctionFragment;
    "vestingInfo(address)": FunctionFragment;
    "vestingStartTime()": FunctionFragment;
    "vestingToken()": FunctionFragment;
    "withdrawTokens()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DISTRIBUTE_RIGHTS_PERIOD"
      | "VESTING_DURATION"
      | "distributeRights"
      | "getAvailableAmount"
      | "owner"
      | "releasePercentageByMonth"
      | "renounceOwnership"
      | "transferOwnership"
      | "vestingEndTime"
      | "vestingInfo"
      | "vestingStartTime"
      | "vestingToken"
      | "withdrawTokens"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DISTRIBUTE_RIGHTS_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VESTING_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "distributeRights",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAvailableAmount",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "releasePercentageByMonth",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "vestingEndTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vestingInfo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "vestingStartTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vestingToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawTokens",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "DISTRIBUTE_RIGHTS_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VESTING_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributeRights",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAvailableAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "releasePercentageByMonth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vestingEndTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vestingInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vestingStartTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vestingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawTokens",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "RightsDistributed(address,uint256)": EventFragment;
    "TokensWithdrawn(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RightsDistributed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensWithdrawn"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RightsDistributedEventObject {
  account: string;
  amount: BigNumber;
}
export type RightsDistributedEvent = TypedEvent<
  [string, BigNumber],
  RightsDistributedEventObject
>;

export type RightsDistributedEventFilter =
  TypedEventFilter<RightsDistributedEvent>;

export interface TokensWithdrawnEventObject {
  account: string;
  amount: BigNumber;
}
export type TokensWithdrawnEvent = TypedEvent<
  [string, BigNumber],
  TokensWithdrawnEventObject
>;

export type TokensWithdrawnEventFilter = TypedEventFilter<TokensWithdrawnEvent>;

export interface Vesting extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VestingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DISTRIBUTE_RIGHTS_PERIOD(overrides?: CallOverrides): Promise<[BigNumber]>;

    VESTING_DURATION(overrides?: CallOverrides): Promise<[BigNumber]>;

    distributeRights(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAvailableAmount(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    releasePercentageByMonth(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    vestingEndTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    vestingInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean] & {
        totalAmount: BigNumber;
        withdrawAmount: BigNumber;
        distributed: boolean;
      }
    >;

    vestingStartTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    vestingToken(overrides?: CallOverrides): Promise<[string]>;

    withdrawTokens(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  DISTRIBUTE_RIGHTS_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

  VESTING_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

  distributeRights(
    account: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAvailableAmount(
    _address: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  releasePercentageByMonth(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  vestingEndTime(overrides?: CallOverrides): Promise<BigNumber>;

  vestingInfo(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, boolean] & {
      totalAmount: BigNumber;
      withdrawAmount: BigNumber;
      distributed: boolean;
    }
  >;

  vestingStartTime(overrides?: CallOverrides): Promise<BigNumber>;

  vestingToken(overrides?: CallOverrides): Promise<string>;

  withdrawTokens(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DISTRIBUTE_RIGHTS_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    VESTING_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    distributeRights(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getAvailableAmount(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    releasePercentageByMonth(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    vestingEndTime(overrides?: CallOverrides): Promise<BigNumber>;

    vestingInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean] & {
        totalAmount: BigNumber;
        withdrawAmount: BigNumber;
        distributed: boolean;
      }
    >;

    vestingStartTime(overrides?: CallOverrides): Promise<BigNumber>;

    vestingToken(overrides?: CallOverrides): Promise<string>;

    withdrawTokens(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "RightsDistributed(address,uint256)"(
      account?: PromiseOrValue<string> | null,
      amount?: null
    ): RightsDistributedEventFilter;
    RightsDistributed(
      account?: PromiseOrValue<string> | null,
      amount?: null
    ): RightsDistributedEventFilter;

    "TokensWithdrawn(address,uint256)"(
      account?: PromiseOrValue<string> | null,
      amount?: null
    ): TokensWithdrawnEventFilter;
    TokensWithdrawn(
      account?: PromiseOrValue<string> | null,
      amount?: null
    ): TokensWithdrawnEventFilter;
  };

  estimateGas: {
    DISTRIBUTE_RIGHTS_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    VESTING_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    distributeRights(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAvailableAmount(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    releasePercentageByMonth(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    vestingEndTime(overrides?: CallOverrides): Promise<BigNumber>;

    vestingInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vestingStartTime(overrides?: CallOverrides): Promise<BigNumber>;

    vestingToken(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawTokens(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DISTRIBUTE_RIGHTS_PERIOD(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    VESTING_DURATION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    distributeRights(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAvailableAmount(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    releasePercentageByMonth(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    vestingEndTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vestingInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vestingStartTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vestingToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawTokens(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
