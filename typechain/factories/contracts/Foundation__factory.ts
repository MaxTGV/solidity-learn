/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  PayableOverrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  Foundation,
  FoundationInterface,
} from "../../contracts/Foundation";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_donationReceiver",
        type: "address",
      },
      {
        internalType: "string",
        name: "_description",
        type: "string",
      },
    ],
    stateMutability: "payable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "InsufficientFunds",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidDonation",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "donor",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "DonationReceived",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "description",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "donate",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "donations",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "donationsReceiver",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "donators",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getDonators",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getSumOfDonations",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "sendFundsToReceiver",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x60a060405260405162001d8e38038062001d8e8339818101604052810190620000299190620006ef565b620000496200003d6200023c60201b60201c565b6200024460201b60201c565b62000065672dcfb7940ff7130360c01b6200030860201b60201c565b620000816777f6d4bbf86946a060c01b6200030860201b60201c565b8173ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050620000d1672ad43772308f90f560c01b6200030860201b60201c565b8060039081620000e29190620009a0565b50620000ff67be8ac5c6d8fd7d5c60c01b6200030860201b60201c565b6200011b679da6ec17b759392960c01b6200030860201b60201c565b6000341115620002175762000141677640148d001e85dd60c01b6200030860201b60201c565b6200015d679689eb43a8b2f11a60c01b6200030860201b60201c565b620001796782226a25f2df1b9960c01b6200030860201b60201c565b620001896200030b60201b60201c565b620001a56720f87b9d1c307c5260c01b6200030860201b60201c565b620001c167558cb4d2da6e2e7a60c01b6200030860201b60201c565b3373ffffffffffffffffffffffffffffffffffffffff167f264f630d9efa0d07053a31163641d9fcc0adafc9d9e76f1c37c2ce3a558d2c523460405162000209919062000a98565b60405180910390a262000234565b620002336714e79d69729f29ef60c01b6200030860201b60201c565b5b505062000b1f565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b50565b620003276763e4f851675674df60c01b6200030860201b60201c565b6200034367f8212826c6187f9860c01b6200030860201b60201c565b6200035f6731fc47cc216b398660c01b6200030860201b60201c565b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054036200046457620003c3678dfefe7b063d248560c01b6200030860201b60201c565b620003df67b65406badcfcf69560c01b6200030860201b60201c565b620003fb679b4d52d26bd046d860c01b6200030860201b60201c565b6002339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555062000481565b62000480671a6f7be34a2293ea60c01b6200030860201b60201c565b5b6200049d67f92d08ef87da183960c01b6200030860201b60201c565b34600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254620004ee919062000ae4565b92505081905550565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062000538826200050b565b9050919050565b6200054a816200052b565b81146200055657600080fd5b50565b6000815190506200056a816200053f565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620005c5826200057a565b810181811067ffffffffffffffff82111715620005e757620005e66200058b565b5b80604052505050565b6000620005fc620004f7565b90506200060a8282620005ba565b919050565b600067ffffffffffffffff8211156200062d576200062c6200058b565b5b62000638826200057a565b9050602081019050919050565b60005b838110156200066557808201518184015260208101905062000648565b60008484015250505050565b60006200068862000682846200060f565b620005f0565b905082815260208101848484011115620006a757620006a662000575565b5b620006b484828562000645565b509392505050565b600082601f830112620006d457620006d362000570565b5b8151620006e684826020860162000671565b91505092915050565b6000806040838503121562000709576200070862000501565b5b6000620007198582860162000559565b925050602083015167ffffffffffffffff8111156200073d576200073c62000506565b5b6200074b85828601620006bc565b9150509250929050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620007a857607f821691505b602082108103620007be57620007bd62000760565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620008287fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82620007e9565b620008348683620007e9565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620008816200087b62000875846200084c565b62000856565b6200084c565b9050919050565b6000819050919050565b6200089d8362000860565b620008b5620008ac8262000888565b848454620007f6565b825550505050565b600090565b620008cc620008bd565b620008d981848462000892565b505050565b5b818110156200090157620008f5600082620008c2565b600181019050620008df565b5050565b601f82111562000950576200091a81620007c4565b6200092584620007d9565b8101602085101562000935578190505b6200094d6200094485620007d9565b830182620008de565b50505b505050565b600082821c905092915050565b6000620009756000198460080262000955565b1980831691505092915050565b600062000990838362000962565b9150826002028217905092915050565b620009ab8262000755565b67ffffffffffffffff811115620009c757620009c66200058b565b5b620009d382546200078f565b620009e082828562000905565b600060209050601f83116001811462000a18576000841562000a03578287015190505b62000a0f858262000982565b86555062000a7f565b601f19841662000a2886620007c4565b60005b8281101562000a525784890151825560018201915060208501945060208101905062000a2b565b8683101562000a72578489015162000a6e601f89168262000962565b8355505b6001600288020188555050505b505050505050565b62000a92816200084c565b82525050565b600060208201905062000aaf600083018462000a87565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600062000af1826200084c565b915062000afe836200084c565b925082820190508082111562000b195762000b1862000ab5565b5b92915050565b60805161124c62000b426000396000818161061901526108e3015261124c6000f3fe6080604052600436106100a05760003560e01c8063bf1482fa11610064578063bf1482fa146101fd578063cc6cb19a14610228578063d5ee155714610265578063ed88c68e14610290578063f2fde38b1461029a578063f3a01489146102c357610125565b80630bcd177e1461012a578063715018a6146101535780637284e4161461016a5780638da5cb5b14610195578063ac62f566146101c057610125565b36610125576100b96755b80f6d554259d860c01b6102ee565b6100c16102f1565b6100d56732a1e7b527190b4e60c01b6102ee565b3373ffffffffffffffffffffffffffffffffffffffff167f264f630d9efa0d07053a31163641d9fcc0adafc9d9e76f1c37c2ce3a558d2c523460405161011b9190610d1e565b60405180910390a2005b600080fd5b34801561013657600080fd5b50610151600480360381019061014c9190610d6a565b610499565b005b34801561015f57600080fd5b50610168610681565b005b34801561017657600080fd5b5061017f610709565b60405161018c9190610e27565b60405180910390f35b3480156101a157600080fd5b506101aa610797565b6040516101b79190610e8a565b60405180910390f35b3480156101cc57600080fd5b506101e760048036038101906101e29190610d6a565b6107c0565b6040516101f49190610e8a565b60405180910390f35b34801561020957600080fd5b506102126107ff565b60405161021f9190610f63565b60405180910390f35b34801561023457600080fd5b5061024f600480360381019061024a9190610fb1565b6108c9565b60405161025c9190610d1e565b60405180910390f35b34801561027157600080fd5b5061027a6108e1565b6040516102879190610e8a565b60405180910390f35b610298610905565b005b3480156102a657600080fd5b506102c160048036038101906102bc9190610fb1565b6109e9565b005b3480156102cf57600080fd5b506102d8610ae0565b6040516102e59190610d1e565b60405180910390f35b50565b6103056763e4f851675674df60c01b6102ee565b61031967f8212826c6187f9860c01b6102ee565b61032d6731fc47cc216b398660c01b6102ee565b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540361041857610388678dfefe7b063d248560c01b6102ee565b61039c67b65406badcfcf69560c01b6102ee565b6103b0679b4d52d26bd046d860c01b6102ee565b6002339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061042d565b61042c671a6f7be34a2293ea60c01b6102ee565b5b61044167f92d08ef87da183960c01b6102ee565b34600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610490919061100d565b92505081905550565b6104ad67355c269bac89106160c01b6102ee565b6104b5610c39565b73ffffffffffffffffffffffffffffffffffffffff166104d3610797565b73ffffffffffffffffffffffffffffffffffffffff1614610529576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105209061108d565b60405180910390fd5b61053d67f8504598461200a160c01b6102ee565b61055167d4a28acdd32269b860c01b6102ee565b61056567cf40ca152b0a5f9760c01b6102ee565b61057967e7699d86873ea37360c01b6102ee565b478111156105db5761059567fb933cf0f7067f5d60c01b6102ee565b6105a967e6a92d00dea399a860c01b6102ee565b6040517f356680b700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6105ef67eb54869ac3ec889660c01b6102ee565b61060367bbb012abcee7c10860c01b6102ee565b610617671f7fb02ebe70d1f760c01b6102ee565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015801561067d573d6000803e3d6000fd5b5050565b610689610c39565b73ffffffffffffffffffffffffffffffffffffffff166106a7610797565b73ffffffffffffffffffffffffffffffffffffffff16146106fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106f49061108d565b60405180910390fd5b6107076000610c41565b565b60038054610716906110dc565b80601f0160208091040260200160405190810160405280929190818152602001828054610742906110dc565b801561078f5780601f106107645761010080835404028352916020019161078f565b820191906000526020600020905b81548152906001019060200180831161077257829003601f168201915b505050505081565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600281815481106107d057600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606061081567c6f03075d7c3194760c01b6102ee565b610829678cc7b7bf3bba1c6f60c01b6102ee565b61083d674a8837f19a157d5260c01b6102ee565b60028054806020026020016040519081016040528092919081815260200182805480156108bf57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610875575b5050505050905090565b60016020528060005260406000206000915090505481565b7f000000000000000000000000000000000000000000000000000000000000000081565b610919671c1c32346205443b60c01b6102ee565b61092d67e94b9dffa35a5a6d60c01b6102ee565b610941670c6f0910084efdeb60c01b6102ee565b600034036109a35761095d6781052a27bd2860ef60c01b6102ee565b61097167cacaa88bfc34db9c60c01b6102ee565b6040517fed0a901a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6109b767f1bf451e5dae9b9760c01b6102ee565b6109cb676f48e80cdb06da2060c01b6102ee565b6109df6765cbfe60de9ff50c60c01b6102ee565b6109e76102f1565b565b6109f1610c39565b73ffffffffffffffffffffffffffffffffffffffff16610a0f610797565b73ffffffffffffffffffffffffffffffffffffffff1614610a65576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a5c9061108d565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610ad4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610acb9061117f565b60405180910390fd5b610add81610c41565b50565b6000610af667607a77db6fd740a260c01b6102ee565b610b0a6709b2e7a67a02194c60c01b6102ee565b610b1e67c2f03838c70679d060c01b6102ee565b6000610b3467c4bdb2b47e332e5360c01b6102ee565b610b47667c793d6871227360c01b6102ee565b60005b600280549050811015610c0957610b6b67b8a4c420cdb6f85360c01b6102ee565b6001600060028381548110610b8357610b8261119f565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482610bf4919061100d565b91508080610c01906111ce565b915050610b4a565b50610c1e67deebf609146e5e2760c01b6102ee565b610c3267e131411e323616e760c01b6102ee565b8091505090565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000819050919050565b610d1881610d05565b82525050565b6000602082019050610d336000830184610d0f565b92915050565b600080fd5b610d4781610d05565b8114610d5257600080fd5b50565b600081359050610d6481610d3e565b92915050565b600060208284031215610d8057610d7f610d39565b5b6000610d8e84828501610d55565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610dd1578082015181840152602081019050610db6565b60008484015250505050565b6000601f19601f8301169050919050565b6000610df982610d97565b610e038185610da2565b9350610e13818560208601610db3565b610e1c81610ddd565b840191505092915050565b60006020820190508181036000830152610e418184610dee565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610e7482610e49565b9050919050565b610e8481610e69565b82525050565b6000602082019050610e9f6000830184610e7b565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b610eda81610e69565b82525050565b6000610eec8383610ed1565b60208301905092915050565b6000602082019050919050565b6000610f1082610ea5565b610f1a8185610eb0565b9350610f2583610ec1565b8060005b83811015610f56578151610f3d8882610ee0565b9750610f4883610ef8565b925050600181019050610f29565b5085935050505092915050565b60006020820190508181036000830152610f7d8184610f05565b905092915050565b610f8e81610e69565b8114610f9957600080fd5b50565b600081359050610fab81610f85565b92915050565b600060208284031215610fc757610fc6610d39565b5b6000610fd584828501610f9c565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061101882610d05565b915061102383610d05565b925082820190508082111561103b5761103a610fde565b5b92915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611077602083610da2565b915061108282611041565b602082019050919050565b600060208201905081810360008301526110a68161106a565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806110f457607f821691505b602082108103611107576111066110ad565b5b50919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611169602683610da2565b91506111748261110d565b604082019050919050565b600060208201905081810360008301526111988161115c565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006111d982610d05565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361120b5761120a610fde565b5b60018201905091905056fea264697066735822122003e30c6573a83c93ff5165275b84ed7ad227bb3db49b34553276a62789bb68de64736f6c63430008120033";

type FoundationConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FoundationConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Foundation__factory extends ContractFactory {
  constructor(...args: FoundationConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _donationReceiver: PromiseOrValue<string>,
    _description: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<Foundation> {
    return super.deploy(
      _donationReceiver,
      _description,
      overrides || {}
    ) as Promise<Foundation>;
  }
  override getDeployTransaction(
    _donationReceiver: PromiseOrValue<string>,
    _description: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _donationReceiver,
      _description,
      overrides || {}
    );
  }
  override attach(address: string): Foundation {
    return super.attach(address) as Foundation;
  }
  override connect(signer: Signer): Foundation__factory {
    return super.connect(signer) as Foundation__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FoundationInterface {
    return new utils.Interface(_abi) as FoundationInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Foundation {
    return new Contract(address, _abi, signerOrProvider) as Foundation;
  }
}
