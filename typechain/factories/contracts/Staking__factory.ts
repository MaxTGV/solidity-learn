/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { Staking, StakingInterface } from "../../contracts/Staking";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_depositToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "_rewardToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_lockPeriod",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_rewardPercentage",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "InsufficientAllowanceError",
    type: "error",
  },
  {
    inputs: [],
    name: "InsufficientBalanceError",
    type: "error",
  },
  {
    inputs: [],
    name: "LockPeriodNotEndedError",
    type: "error",
  },
  {
    inputs: [],
    name: "NoActiveDepositError",
    type: "error",
  },
  {
    inputs: [],
    name: "RewardAlreadyClaimedError",
    type: "error",
  },
  {
    inputs: [],
    name: "RewardNotClaimedError",
    type: "error",
  },
  {
    inputs: [],
    name: "ZeroAmountError",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    name: "DepositMade",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "RewardClaimed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Withdrawal",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "depositAmount",
        type: "uint256",
      },
    ],
    name: "calculateReward",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "claimRewards",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "deposit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "depositToken",
    outputs: [
      {
        internalType: "contract ERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "deposits",
    outputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "rewardClaimed",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "lockPeriod",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "rewardPercentage",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "rewardToken",
    outputs: [
      {
        internalType: "contract ERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b506040516200133738038062001337833981810160405281019062000037919062000175565b836000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550816002819055508060038190555050505050620001e7565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200010282620000d5565b9050919050565b6200011481620000f5565b81146200012057600080fd5b50565b600081519050620001348162000109565b92915050565b6000819050919050565b6200014f816200013a565b81146200015b57600080fd5b50565b6000815190506200016f8162000144565b92915050565b60008060008060808587031215620001925762000191620000d0565b5b6000620001a28782880162000123565b9450506020620001b58782880162000123565b9350506040620001c8878288016200015e565b9250506060620001db878288016200015e565b91505092959194509250565b61114080620001f76000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063b6b55f2511610066578063b6b55f25146100e8578063c89039c514610104578063d2d7231f14610122578063f7c618c114610152578063fc7e286d1461017057610093565b8063372500ab146100985780633ccfd60b146100a25780633fd8b02f146100ac57806352d472eb146100ca575b600080fd5b6100a06101a2565b005b6100aa610364565b005b6100b46104e2565b6040516100c19190610b4d565b60405180910390f35b6100d26104e8565b6040516100df9190610b4d565b60405180910390f35b61010260048036038101906100fd9190610b99565b6104ee565b005b61010c6107e3565b6040516101199190610c45565b60405180910390f35b61013c60048036038101906101379190610b99565b610807565b6040516101499190610b4d565b60405180910390f35b61015a61082a565b6040516101679190610c45565b60405180910390f35b61018a60048036038101906101859190610c9e565b610850565b60405161019993929190610ce6565b60405180910390f35b6000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000816000015403610223576040517f3bdb9bb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60025481600101546102359190610d4c565b42101561026e576040517fd9be2ec100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060020160009054906101000a900460ff16156102b7576040517f82e4b30100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006102c68260000154610807565b905060018260020160006101000a81548160ff021916908315150217905550610312600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163383610887565b3373ffffffffffffffffffffffffffffffffffffffff167f106f923f993c2149d49b4255ff723acafa1f2d94393f561d3eda32ae348f7241826040516103589190610b4d565b60405180910390a25050565b6000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060008160000154036103e5576040517f3bdb9bb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060020160009054906101000a900460ff1661042d576040517fd3182ccf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61045c60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16338360000154610887565b600081600001819055506000816001018190555060008160020160006101000a81548160ff0219169083151502179055503373ffffffffffffffffffffffffffffffffffffffff167f7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b6582600001546040516104d79190610b4d565b60405180910390a250565b60025481565b60035481565b60008103610528576040517f6e0ccc0700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e33306040518363ffffffff1660e01b8152600401610584929190610d8f565b602060405180830381865afa1580156105a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c59190610dcd565b10156105fd576040517f73a74a7800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016106579190610dfa565b602060405180830381865afa158015610674573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106989190610dcd565b10156106d0576040517f384d3c5900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6106fc60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff163330846109dc565b604051806060016040528082815260200142815260200160001515815250600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082015181600001556020820151816001015560408201518160020160006101000a81548160ff0219169083151502179055509050503373ffffffffffffffffffffffffffffffffffffffff167f0b05f0d1cd0819f155b8a61f60baf7767c1ee49d04aeaab701df236140eb93f982426040516107d8929190610e15565b60405180910390a250565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006064600354836108199190610e3e565b6108239190610eaf565b9050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60046020528060005260406000206000915090508060000154908060010154908060020160009054906101000a900460ff16905083565b6000808473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb60e01b85856040516024016108bc929190610ee0565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516109269190610f7a565b6000604051808303816000865af19150503d8060008114610963576040519150601f19603f3d011682016040523d82523d6000602084013e610968565b606091505b509150915081801561099657506000815114806109955750808060200190518101906109949190610fbd565b5b5b6109d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109cc90611047565b60405180910390fd5b5050505050565b6000808573ffffffffffffffffffffffffffffffffffffffff166323b872dd60e01b868686604051602401610a1393929190611067565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051610a7d9190610f7a565b6000604051808303816000865af19150503d8060008114610aba576040519150601f19603f3d011682016040523d82523d6000602084013e610abf565b606091505b5091509150818015610aed5750600081511480610aec575080806020019051810190610aeb9190610fbd565b5b5b610b2c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b23906110ea565b60405180910390fd5b505050505050565b6000819050919050565b610b4781610b34565b82525050565b6000602082019050610b626000830184610b3e565b92915050565b600080fd5b610b7681610b34565b8114610b8157600080fd5b50565b600081359050610b9381610b6d565b92915050565b600060208284031215610baf57610bae610b68565b5b6000610bbd84828501610b84565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610c0b610c06610c0184610bc6565b610be6565b610bc6565b9050919050565b6000610c1d82610bf0565b9050919050565b6000610c2f82610c12565b9050919050565b610c3f81610c24565b82525050565b6000602082019050610c5a6000830184610c36565b92915050565b6000610c6b82610bc6565b9050919050565b610c7b81610c60565b8114610c8657600080fd5b50565b600081359050610c9881610c72565b92915050565b600060208284031215610cb457610cb3610b68565b5b6000610cc284828501610c89565b91505092915050565b60008115159050919050565b610ce081610ccb565b82525050565b6000606082019050610cfb6000830186610b3e565b610d086020830185610b3e565b610d156040830184610cd7565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d5782610b34565b9150610d6283610b34565b9250828201905080821115610d7a57610d79610d1d565b5b92915050565b610d8981610c60565b82525050565b6000604082019050610da46000830185610d80565b610db16020830184610d80565b9392505050565b600081519050610dc781610b6d565b92915050565b600060208284031215610de357610de2610b68565b5b6000610df184828501610db8565b91505092915050565b6000602082019050610e0f6000830184610d80565b92915050565b6000604082019050610e2a6000830185610b3e565b610e376020830184610b3e565b9392505050565b6000610e4982610b34565b9150610e5483610b34565b9250828202610e6281610b34565b91508282048414831517610e7957610e78610d1d565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610eba82610b34565b9150610ec583610b34565b925082610ed557610ed4610e80565b5b828204905092915050565b6000604082019050610ef56000830185610d80565b610f026020830184610b3e565b9392505050565b600081519050919050565b600081905092915050565b60005b83811015610f3d578082015181840152602081019050610f22565b60008484015250505050565b6000610f5482610f09565b610f5e8185610f14565b9350610f6e818560208601610f1f565b80840191505092915050565b6000610f868284610f49565b915081905092915050565b610f9a81610ccb565b8114610fa557600080fd5b50565b600081519050610fb781610f91565b92915050565b600060208284031215610fd357610fd2610b68565b5b6000610fe184828501610fa8565b91505092915050565b600082825260208201905092915050565b7f5354000000000000000000000000000000000000000000000000000000000000600082015250565b6000611031600283610fea565b915061103c82610ffb565b602082019050919050565b6000602082019050818103600083015261106081611024565b9050919050565b600060608201905061107c6000830186610d80565b6110896020830185610d80565b6110966040830184610b3e565b949350505050565b7f5354460000000000000000000000000000000000000000000000000000000000600082015250565b60006110d4600383610fea565b91506110df8261109e565b602082019050919050565b60006020820190508181036000830152611103816110c7565b905091905056fea26469706673582212205511af2335e4d591f1b6d26cba11bc1da5a67dc122e1d9842fe40f081618cf2464736f6c63430008120033";

type StakingConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: StakingConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Staking__factory extends ContractFactory {
  constructor(...args: StakingConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _depositToken: PromiseOrValue<string>,
    _rewardToken: PromiseOrValue<string>,
    _lockPeriod: PromiseOrValue<BigNumberish>,
    _rewardPercentage: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Staking> {
    return super.deploy(
      _depositToken,
      _rewardToken,
      _lockPeriod,
      _rewardPercentage,
      overrides || {}
    ) as Promise<Staking>;
  }
  override getDeployTransaction(
    _depositToken: PromiseOrValue<string>,
    _rewardToken: PromiseOrValue<string>,
    _lockPeriod: PromiseOrValue<BigNumberish>,
    _rewardPercentage: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _depositToken,
      _rewardToken,
      _lockPeriod,
      _rewardPercentage,
      overrides || {}
    );
  }
  override attach(address: string): Staking {
    return super.attach(address) as Staking;
  }
  override connect(signer: Signer): Staking__factory {
    return super.connect(signer) as Staking__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StakingInterface {
    return new utils.Interface(_abi) as StakingInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Staking {
    return new Contract(address, _abi, signerOrProvider) as Staking;
  }
}
